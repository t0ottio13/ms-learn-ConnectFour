@inject ConnectFour.Shared.GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: yellow; /** the color of the board **/
            --player1: blue; /** Player 1's piece color **/
            --player2: red; /** Player 2's piece color **/
        }
    </style>
</HeadContent>

<nav>
	<span title="Click to play a piece" @onclick="() => PlayPiece(1)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(2)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(3)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(4)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(5)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(6)">🔽</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(7)">🔽</span>
</nav>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container"><span></span></span>
            
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@Pieces[i]"></span>
    }
</div>



@code {
    private string[] Pieces = new string[42];
	protected override void OnInitialized()
	{
		State.ResetBoard();
	}

    private void PlayPiece(byte col) 
    {
        var landingRow = State.PlayPiece(col);
        var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
        Pieces[State.CurrentTurn - 1] = cssClass;
    }
}